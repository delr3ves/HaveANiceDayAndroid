apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'io.fabric'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
check.dependsOn 'checkstyle'

checkstyle {
    toolVersion = '8.3'
}

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.emaginalabs.haveaniceday"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/assets/schemas".toString()]
            }
        }
    }

    signingConfigs {
        production {
            keyAlias "haveaniceday"
            keyPassword "123456"
            storePassword "123456"
            storeFile file("../keystore.jks")
        }
    }

    buildTypes {
        debug {
            ext.enableCrashlytics = false
            testCoverageEnabled true
            debuggable true
            signingConfig signingConfigs.production
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.production
        }
    }

    flavorDimensions "tier"

    productFlavors {
        def STRING = "String"
        def ENVIRONMENT = "ENVIRONMENT"

        def nowVersionCode = {
            def now = new Date().time / 1000L
            now.toInteger().abs()
        }

        production {
            buildConfigField STRING, ENVIRONMENT, "\"PRODUCTION\""
            dimension "tier"
        }

        beta {
            versionCode nowVersionCode()
            versionNameSuffix ' beta'
            buildConfigField STRING, ENVIRONMENT, "\"PRODUCTION\""
            ext.betaDistributionEmailsFilePath = "beta_distribution_emails.txt"
            ext.betaDistributionReleaseNotesFilePath = "beta_distribution_release_notes.txt"
            dimension "tier"
        }

        pre {
            applicationIdSuffix ".pre"
            versionCode nowVersionCode()
            versionNameSuffix ' pre'
            buildConfigField STRING, ENVIRONMENT, "\"PREPRODUCTION\""
            ext.betaDistributionEmailsFilePath = "pre_distribution_emails.txt"
            dimension "tier"
        }

    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
        androidTest.assets.srcDirs += files("$projectDir/assets".toString())
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    implementation "com.android.support:appcompat-v7:$support_library_version"
    implementation "com.android.support:design:$support_library_version"
    implementation "com.android.support:cardview-v7:$support_library_version"

    implementation "com.github.salomonbrys.kodein:kodein:$kodein_version"
    implementation "com.github.salomonbrys.kodein:kodein-android:$kodein_version"

    implementation "com.google.firebase:firebase-messaging:$firebase_version"
    implementation "com.google.firebase:firebase-crash:$firebase_version"

    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.+'
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"

    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation "android.arch.persistence.room:rxjava2:$room_version"
    kapt "android.arch.persistence.room:compiler:$room_version"

    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "me.leolin:ShortcutBadger:1.1.18@aar"

    implementation 'org.jetbrains.anko:anko-common:0.10.1'

    implementation 'net.danlew:android.joda:2.9.9'

    testImplementation 'junit:junit:4.12'
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "android.arch.persistence.room:testing:$room_version"
}

apply plugin: 'com.google.gms.google-services'

afterEvaluate {
    initFabricPropertiesIfNeeded()
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/../config/checkstyle/suppressions.xml").absolutePath // Where is my suppressions file for checkstyle is...
    source 'src'
    include '**/**/*.kt'
    exclude '**/gen/**'
    classpath = files()
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testPreDebugUnitTest', 'connectedPreDebugAndroidTest', 'createPreDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

def initFabricPropertiesIfNeeded() {
    def propertiesFile = file('fabric.properties')
    if (!propertiesFile.exists()) {
        def commentMessage = "This is autogenerated fabric property from system environment to prevent key to be committed to source control."
        ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
            entry(key: "apiSecret", value: fabricSecret)
            entry(key: "apiKey", value: fabricKey)
        }
    }
}